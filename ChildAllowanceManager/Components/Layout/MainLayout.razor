@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase

<MudThemingProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudText Typo="Typo.h5" Class="ml-3">Allowance Manager</MudText>
        <MudSpacer/>
        @if (_user != null && (_user!.Identity?.IsAuthenticated ?? false))
        {
            <MudText Color="Color.Inherit" Typo="Typo.h6" Class="mr-2">@_user.!Identity.Name</MudText>
            <MudLink Color="Color.Inherit" Href="/.auth/login/aad>?post_login_redirect_uri=/">Log Out</MudLink>
        }
        else
        {
            <MudLink Color="Color.Inherit" Typo="Typo.h6" Class="mr-2" Href="/.auth/login/aad">Log In</MudLink>
        }
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End"/>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private ClaimsPrincipal? _user;
    
    [CascadingParameter]
    private Task<AuthenticationState>? _authenticationState { get; set; }


    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (_authenticationState != null)
        {
            var authState = await _authenticationState;
            _user = authState.User;
        }
    }

}