@using System.Security.Claims
@using ChildAllowanceManager.Common.Interfaces
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inherits LayoutComponentBase

<MudThemingProvider/>
<MudPopoverProvider/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())"/>
        <MudText Typo="Typo.h5" Class="ml-3">Allowance Manager</MudText>
        <MudSpacer/>
        <AuthorizeView>
            <Authorized>
                <MudText Color="Color.Inherit" Typo="Typo.h6" Class="mr-2">@(_user?.Identity?.Name)</MudText>
                <MudLink Color="Color.Inherit" Href="/logout">Log Out</MudLink>
            </Authorized>
            <NotAuthorized>
                <MudLink Color="Color.Inherit" Typo="Typo.h6" Class="mr-2" Href="/login">Log In</MudLink>
            </NotAuthorized>
        </AuthorizeView>
        
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End"/>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private ClaimsPrincipal? _user;
    
    [CascadingParameter]
    private Task<AuthenticationState>? _authenticationState { get; set; }

    [Inject] ICurrentContextService CurrentContextService { get; set; } = default!;
    [Inject] ProtectedLocalStorage LocalStorage { get; set; } = default!;
    [Inject] IJSRuntime JSRuntime { get; set; } = default!; 

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (_authenticationState != null)
        {
            var authState = await _authenticationState;
            _user = authState.User;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && await LocalStorage.GetAsync<string>("current_tenant") is var currentTenant && currentTenant.Success)
        {
            CurrentContextService.SetCurrentTenant(currentTenant.Value!);
            
            // set long lived cookie
            // load JS module
            var module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./Components/Layout/MainLayout.razor.js");
            // set cookie
            await JSRuntime.InvokeVoidAsync("MainLayout.createCookie", "current_tenant", currentTenant.Value!, 365);
        }
    }

}