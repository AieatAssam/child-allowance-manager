@page "/{tenantSuffix}/children"
@using ChildAllowanceManager.Common.Models
@using ChildAllowanceManager.Workers
@using Humanizer
@using Microsoft.Extensions.Logging.Abstractions
@using Quartz
@using Quartz.Impl
@using Quartz.Spi

<PageTitle>Child Allowance Manager</PageTitle>

<MudPaper Elevation="10" Class="ma-6">
    @foreach (var child in Children ?? Array.Empty<ChildWithBalance>())
    {
        <MudCard>
            <MudCardHeader>
                <MudAvatar Class="mr-3">@child.Name[0]</MudAvatar>
                <MudText Typo="Typo.h5">@child.Name</MudText>
                <MudSpacer></MudSpacer>
                @if (child.IsBirthday)
                {
                    <MudIcon Icon="Icons.Material.Filled.Cake" Color="Color.Success"></MudIcon>
                }
                <MudIconButton Icon="@Icons.Material.Filled.ViewList" OnClick="() => ShowTransactionsForChild(child)"></MudIconButton>
            </MudCardHeader>
            <MudCardContent>
                <MudText Typo="Typo.h6" Color="@(child.Balance > 0 ? Color.Success : Color.Error)">@child.Balance.ToString("C2")</MudText>
                <MudText Typo="Typo.subtitle1">+@child.NextRegularChange.ToString("C2") @child.NextRegularChangeDate.ToLocalTime().Humanize()</MudText>
                <MudButton OnClick="async () => await TopUp(child)">Topup</MudButton>
            </MudCardContent>
        </MudCard>
    }
</MudPaper>

@code {
    
    private async Task TopUp(ChildWithBalance child)
    {
        var transaction = new AllowanceTransaction
        {
            ChildId = child.Id,
            TenantId = child.TenantId,
            TransactionAmount = child.NextRegularChange,
            TransactionType = child.IsBirthday ? TransactionType.BirthdayAllowance : TransactionType.DailyAllowance,
            Description = child.IsBirthday ? "Birthday allowance" : "Daily allowance"
        };
        await TransactionService.AddTransaction(transaction, CancellationToken.None);
    }

    

}